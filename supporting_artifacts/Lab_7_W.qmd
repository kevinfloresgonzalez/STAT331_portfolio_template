---
title: "Lab 7"
author: "Kevin Flores Gonzalez"
format:
  html: 
    code-fold: true
    code-summary: "Show the code"
    theme: lux
    toc: true
    self-contained: true
    code-tools: true
editor: visual
execute:
  echo: true
  error: true
  messages: false
---

# Lab 7: Functions and Fish

The goal of this lab is learn more about exploring missing data and to teach you to write modular code.\

## 1: The Data

Mark-recapture is a common method used by Ecologists to estimate an animal population's size, when it is impossible to conduct a census (count every animal). This method works by "tagging" animals with a tracking device, so scientists can track their movement and / or presence.

```{r}
#| message: FALSE
library(tidyverse)
library(dplyr)
bf_fish <- read_csv(here::here
                    ("Week 7", 
                      "Lab 7", 
                      "Blackfootfish.csv"))
```

## 2: Part One: Summaries and Plots

### 2.1: Summarizing Missing Data

The measurements of each fish captured were taken by a Biologist on a raft. This lack of "laboratory setting" opens the door to the possibility of measurement errors.

-   What variable(s) have missing values present?

-   How many observations within each variable have missing values?

```{r}
bf_fish |>
  summarize(across(.cols = everything(),
                    .fns = ~sum(is.na(.))))
```

### 2.2 Visualizing Missing Data

```{r}
bf_fish |> 
  mutate(Named_Trips = ifelse(trip == 1, 
                         "Trip 1", 
                         "Trip 2")) |>
  group_by(Named_Trips,
           year,
           section) |> 
  summarize(weight = sum(is.na(
                         weight))) |> 
  ggplot(mapping = aes(x = year, 
                       y = weight)) +
  geom_col(aes(fill = section), 
           position = "stack") +
  facet_wrap(~Named_Trips) +
  labs(
    title = "Number of NA Weight Observations",
    x = "Weight",
    fill = "Section of Blackfoot River",
    y = "Year"
  ) +
  coord_flip()
```

Unfortunately, these missing values are not for only one `year`, `trip`, or `section` of river.

Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

## 3 Part Two: Adjusting the Data (Function Writing)

### 3.1: Writing a Function

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.

-   The function should return the rescaled vector.

```{r}
rescale_01 <- function(vector1){
  range_vector <- range(vector1)
  numerator <- vector1 - range_vector[1]
  denom <- range_vector[2] - range_vector[1]
  return(numerator/denom)
}
```

### 3.2 Adding Stops

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric

-   the function should stop if the length of the vector is not greater than 1

```{r}
rescale_01 <- function(vector1){
  stopifnot(is.numeric(vector1), length(vector1) >= 1)
  range_vector <- range(vector1, na.rm = TRUE)
  numerator <- vector1 - range_vector[1]
  denom <- range_vector[2] - range_vector[1]
  return(numerator/denom)
}
```

### 3.3 Performing a Simple Test

First, test your function on the simple vector below. **Add code** that verifies the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
rescale_01(c(1:25, NA))
```

### 3.4: Performing a More Difficult Test

```{r}
ggplot(data = bf_fish, 
       mapping = aes(y = rescale_01(length))) +
  geom_bar()
ggplot(data = bf_fish,
       mapping = aes(y = length)) +
  geom_bar()
  
```

### 3.5 Incorporating Variables

Suppose you would like to make a more general `rescale_column()` function that perform operations on any variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments:

1.  a dataframe

2.  the name(s) of the variable(s) to be rescaled

The body of the function should call the original `rescale_01()` function you wrote previously.

```{r}
rescale_column <- function(data, variables){
  stopifnot(is.data.frame(data))
  data <- data |> 
  mutate(
    across(
      .cols = {{ variables }},
      .fns = rescale_01
    )
  )
  return(data)
}
```

### 3.6: Another Function Test

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

```{r}
rescale_column(bf_fish, 
               c(length, 
                 weight))
```
