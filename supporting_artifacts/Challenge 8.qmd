---
title: "Challenge_8_W"
author: "Kevin Flores Gonzalez"
format:
  html: 
    code-fold: true
    code-summary: "Show the code"
    theme: lux
    toc: true
    self-contained: true
    code-tools: true
editor: visual
execute:
  echo: true
  error: true
  messages: false
---

# Lab 8: The 12 Days of Christmas

The song "12 Days of Christmas", written around 1780, tells the tale of many gifts a person receives in the days leading up to Christmas ([link to lyrics](https://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)%5D(https://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)))).

These gifts repeat and compound; on the first day, the narrator receives

    A partridge in a pear tree.

On the twelfth day, they receive

    Twelve Drummers Drumming
    Eleven Pipers Piping
    Ten Lords a Leaping
    Nine Ladies Waiting
    Eight Maids a Milking
    Seven Swans a Swimming
    Six Geese a Laying
    Five Golden Rings
    Four Calling Birds
    Three French Hens
    Two Turtle Doves
    And a Partridge in a Pear Tree

This week, your task will be to write functions that automatically sing this very repetitive song. Today, we will start by writing two helper functions which we will use on Thursday to write a function to sing this song.

## Importing the Dataset & Declaring Dependencies

```{r}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr) 
library(english) 
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

## 0.1 - Singing the Song

The `pluralize_gift()` function, complete the code so that the function takes a gift and returns the appropriate plural.

```{r}
pluralize_gift <- function(gift){
  gift <- case_when(
    str_detect(gift, "oo") ~ str_replace(gift, 
                                         "oo", 
                                         "ee"),
    str_detect(gift, "y$") ~ str_replace(gift, 
                                         "y", 
                                         "ies"),
    TRUE ~ str_c(gift,
                 "s", 
                 sep = "")
  )
return(gift)
}
```

The `make_phrase()` that takes as input the necessary information, and returns a phrase.

```{r}
make_phrase <- function(num_word,
                        item, 
                        verb, 
                        adjective, 
                        location) {
  verb <- str_replace_na(verb, 
                         "")
  adjective <- str_replace_na(adjective, 
                              "")
  location <- str_replace_na(location, 
                             "")
  
    item <- case_when(
    num_word != "one" ~ pluralize_gift(item),
    str_detect(item, "^(a|e|i|o|u|A|E|I|O|U)") == TRUE ~ str_c("an ", 
                                                               item),
    TRUE ~ item)
    
  if(num_word == "one"){ 
    num_word = "a "}
  glue_phrase = glue::glue("{num_word} {adjective} {item} {verb} {location}")
  return(str_squish(glue_phrase))
}
```

```{r}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)
                                ), 
    Full.Phrase = pmap_chr(
      list(
           num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )
```

## 1 - Step Three: Iteration

Write a function called `sing_day()` that takes as input:

-   A dataset (input as a dataframe)

-   A number indicating which day to sing about (input as an integer)

-   The name of a column in the dataset that contains the phrases for each day (input as an **tidy** name)

```{r}
sing_day <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- english::ordinal(line)
  
  intro <- 
    glue::glue("On the {num_word} day of Christmas, my true love gave to me:")
  
  # Step 2: Sing the gift phrases
    phrases <- dataset |>
      pull( {{phrase_col}} )
    phrases_day <- glue_collapse(phrases[line:1], sep = " \n", last = " and \n")
    phrases_day <- str_c(phrases_day, "\n")
    phrases_end <- glue::glue("{intro} \n {phrases_day}")
    
    
  ## put it together
    return(phrases_end)
}
```

## 1.1 - A Small Test

```{r}
xmas2 |>
sing_day(line = 2, phrase_col = Full.Phrase)
```

## 2 - Step Four: Use Your Functions

Now that you've written your `sing_line()` function, it is time to use it to sing the entire 12 Days of Christmas song. To do this, you will need to iterate over each day of the 12 days, to obtain the lyrics for that day.

```{r}
xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase)
  )
```

```{r}
map_chr(1:12, ~sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```

## 3 - Challenge: Styling Your Song

### 3.1 - Option 1: Removing Whitespaces

```{r}

```

### 3.2 - Option 2: New Lines for Gifts

```{r}

```

### 3.3 Option 3: Spaces Between Days

```{r}

```

### 3.4 Option 4: Getting Grammatical
